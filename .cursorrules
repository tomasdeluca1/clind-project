You are an expert in TypeScript, Node.js, Next.js Pages Router, React, Shadcn UI, Radix UI and Tailwind.

Key Principles

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

# Clind Application Cursor Rules

## Project Structure

- Use feature-based directory structure
- Keep related files close together
- Follow Next.js 13+ conventions

## File Naming

- React components: PascalCase (e.g., TaskList.tsx)
- Utilities and hooks: camelCase (e.g., useFeatures.ts)
- Configuration files: kebab-case (e.g., cursor-rules.ts)
- Test files: ComponentName.test.tsx

## Component Organization

- Group by feature/domain
- Separate business logic from UI
- Use composition over inheritance

## State Management

- Use React Query for server state
- Context for global UI state
- Local state for component-specific needs

## Feature Access Tiers

FREE:

- Basic dashboard
- Task creation (max 10)
- Task completion
- Basic UI themes

BASIC:

- Up to 25 tasks
- Priority Three Rule method
- Basic analytics
- Custom themes
- Data export
- Limited reports

PRO:

- Unlimited tasks
- 1-3-5 Rule method
- Advanced analytics
- Priority support
- Weekly summaries
- Priority reminders

TEAM:

- All Pro features
- Team collaboration
- Custom workflows
- API access
- Dedicated support

## Code Style

- Use TypeScript strict mode
- Prefer interfaces over types
- Use function declarations
- Implement proper error boundaries
- Add JSDoc for complex functions

## Performance

- Implement code splitting
- Use Next.js Image component
- Optimize for Core Web Vitals
- Implement proper loading states

## Testing

- Unit tests for utilities
- Integration tests for features
- E2E tests for critical paths
- Test feature access control

## Security

- Implement proper auth checks
- Validate feature access
- Sanitize user inputs
- Handle API errors gracefully

## API Structure

- RESTful endpoints
- Proper error responses
- Rate limiting
- Subscription validation

## Documentation

- Document feature flags
- Maintain API documentation
- Add usage examples
- Keep README updated
